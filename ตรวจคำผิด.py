import streamlit as st
import os
import pandas as pd
from pdf_processing import extract_text_from_pdf, correct_text, save_text_to_pdf

UPLOAD_FOLDER = "uploads"
CORRECTED_FOLDER = "corrected_pdfs"
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(CORRECTED_FOLDER, exist_ok=True)

st.set_page_config(page_title="üìù ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ú‡∏¥‡∏î", layout="wide")
st.title("üìù ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ú‡∏¥‡∏î‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ PDF")

uploaded_file = st.file_uploader("üìé ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", type=["pdf"])

if uploaded_file is not None:
    pdf_path = os.path.join(UPLOAD_FOLDER, uploaded_file.name)
    with open(pdf_path, "wb") as f:
        f.write(uploaded_file.getbuffer())

    st.success(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: `{uploaded_file.name}`")

    with st.spinner("üìñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå..."):
        extracted_lines = extract_text_from_pdf(pdf_path)

    st.markdown("## üîé ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å PDF")
    st.text_area("üìÉ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö", "\n".join(extracted_lines), height=200)

    with st.spinner("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏≥‡∏ú‡∏¥‡∏î..."):
        corrected_lines, error_list = correct_text(extracted_lines)

    st.markdown("## üõë ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ú‡∏¥‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö")

    if error_list:
        df_errors = pd.DataFrame(error_list, columns=["‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà", "‡∏Ñ‡∏≥‡∏ú‡∏¥‡∏î", "‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"])
        corrected_words = {}

        for index, row in df_errors.iterrows():
            col1, col2, col3 = st.columns([1, 2, 3])
            col1.write(f"üìå ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà {row['‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà']}")
            col2.write(f"‚ùå {row['‡∏Ñ‡∏≥‡∏ú‡∏¥‡∏î']}")
            selected_correction = col3.selectbox(
                "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
                options=["(‡πÑ‡∏°‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)"] + row["‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"],
                key=f"correction_{index}"
            )
            if selected_correction != "(‡πÑ‡∏°‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)":
                corrected_words[row["‡∏Ñ‡∏≥‡∏ú‡∏¥‡∏î"]] = selected_correction

        col_a, col_b = st.columns(2)

        with col_a:
            if st.button("‚úÖ ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"):
                for line_no in range(len(corrected_lines)):
                    for error, correction in corrected_words.items():
                        corrected_lines[line_no] = corrected_lines[line_no].replace(error, correction)
                st.text_area("üìù ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "\n".join(corrected_lines), height=200)

        with col_b:
            if st.button("üîÑ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"):
                for line_no in range(len(corrected_lines)):
                    for error, suggestions in df_errors[["‡∏Ñ‡∏≥‡∏ú‡∏¥‡∏î", "‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"]].values:
                        if suggestions:
                            corrected_lines[line_no] = corrected_lines[line_no].replace(error, suggestions[0])
                st.text_area("üìù ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)", "\n".join(corrected_lines), height=200)

    else:
        st.success("‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ú‡∏¥‡∏î!")
